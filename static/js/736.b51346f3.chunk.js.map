{"version":3,"file":"static/js/736.b51346f3.chunk.js","mappings":"8RAEaA,EAAWC,EAAAA,GAAAA,GAAH,qI,GASDA,EAAAA,GAAAA,EAAH,yC,QCmCjB,EAvCc,WACV,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GAER,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA4BJ,EAAAA,EAAAA,WAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,oGAEVF,GAAU,GAFA,UAGaG,EAAAA,EAAAA,IAAmBX,GAHhC,OAGJY,EAHI,OAIVR,EAAQQ,GAJE,gDAKIN,EAAS,wDALb,yBAMHE,GAAU,GANP,4EAAH,qDAQfE,GACH,GAAC,CAACV,KACK,gCACHO,IAAU,sCACVF,IAAS,yBAAMA,KAChB,SAACP,EAAD,UACKK,EAAKU,KAAI,SAAAC,GACN,OACI,2BACI,gBAAKC,IAAG,yCAAoCD,EAAKE,cAAgBC,IAAKH,EAAKI,QAC3E,4BACI,UAAC,KAAD,oBAAaJ,EAAKI,SAClB,UAAC,KAAD,2BAAoBJ,EAAKK,kBAJxBL,EAAKd,GAQrB,QAKX,C,+JC1CWoB,EAAOrB,EAAAA,GAAAA,EAAH,yCAIJsB,EAAOtB,EAAAA,GAAAA,GAAH,iEAKJuB,EAAOvB,EAAAA,GAAAA,GAAH,8CAKJwB,EAAaxB,EAAAA,GAAAA,KAAH,yC,kMCdvByB,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EACQ,uBADRA,EAEM,gBAFNA,EAGY,SAHZA,EAIY,WAJZA,EAKO,WAIAC,EAAS,mCAAG,yGAAOC,EAAP,+BAAY,EAAZ,SACEH,EAAAA,EAAAA,IAAA,UAAaC,EAAb,iBAAyCE,EAAzC,uCACnB,CACIC,OAAQ,CACJC,QAAS,sCAJA,cACfjB,EADe,OAQrBkB,QAAQC,IAAInB,EAASoB,KAAKC,SARL,kBASdrB,EAASoB,KAAKC,SATA,2CAAH,qDAYTC,EAAmB,mCAAG,WAAOC,GAAP,4FAAcR,EAAd,+BAAqB,EAArB,SACRH,EAAAA,EAAAA,IAAA,UAAaC,EAAb,iBAAuCE,EAAvC,kBAAqDQ,EAArD,uCAClB,CACGP,OAAQ,CACJC,QAAS,sCAJU,cACzBjB,EADyB,yBAOxBA,EAASoB,KAAKC,SAPU,2CAAH,sDAUnBG,EAAkB,mCAAG,WAAOpC,GAAP,uFACPwB,EAAAA,EAAAA,IAAA,UAAaC,EAAb,YAAwCzB,EAAxC,mBAClB,CACG4B,OAAQ,CACJC,QAAS,sCAJS,cACxBjB,EADwB,yBAOvBA,EAASoB,MAPc,2CAAH,sDAUlBrB,EAAkB,mCAAG,WAAOX,GAAP,uFACPwB,EAAAA,EAAAA,IAAA,iBAAoBxB,GAApB,OAAyByB,EAAzB,mBAClB,CACGG,OAAQ,CACJC,QAAS,sCAJS,cACxBjB,EADwB,yBAOvBA,EAASoB,KAAK7B,MAPS,2CAAH,sDAUlBkC,EAAkB,mCAAG,WAAOrC,GAAP,4FAAW2B,EAAX,+BAAkB,EAAlB,SACPH,EAAAA,EAAAA,IAAA,iBAAoBxB,GAApB,OAAyByB,EAAzB,iBAAoDE,EAApD,mBACvB,CACQC,OAAQ,CACJC,QAAS,sCAJS,cACxBjB,EADwB,yBAOvBA,EAASoB,KAAKC,SAPS,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.jsx","filmApi.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\npadding-left: 0;\ngap: 60px;\nlist-style: none;\n`\n\nexport const Text = styled.p`\ncolor: #f5f5f5;\n`","import { Text } from \"components/Reviews/Reviews.styled\";\nimport { fetchMoviesCredits } from \"filmApi\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\"\nimport { CastList } from \"./Cast.styled\";\n\n const Cast = () => {\n    const { id } = useParams();\n\n    const [cast, setCast] = useState([]);\n    const [error, setError] = useState(null);\n    const [loader, setLoader] = useState(false);\n\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                setLoader(true)\n                const response = await fetchMoviesCredits(id);\n                setCast(response)\n            } catch (error) { setError('Something went wrong. Please, try a little bit later') }\n            finally { (setLoader(false)) }\n        }\n        fetchCast()\n    },[id])\n    return (<>\n        {loader && <p>Loading...</p>}\n        {error && <div>{error}</div>}\n        <CastList>\n            {cast.map(item => {\n                return (\n                    <li key={item.id}>\n                        <img src={`https://image.tmdb.org/t/p/w300${item.profile_path}`} alt={item.name} />\n                        <div>\n                            <Text>Name: {item.name}</Text>\n                            <Text>Character:   {item.character}</Text>\n                        </div>\n                    </li>\n                )\n            })}\n        </CastList>\n    </>\n   \n    )\n }\n\nexport default Cast;","import styled from \"styled-components\";\n\nexport const Text = styled.p`\ncolor: #f5f5f5;\n`\n\nexport const Item = styled.li`\nlist-style: none;\nmargin-bottom: 32px;\n` \n\nexport const List = styled.ul`\npadding-left: 0px;\n\n`\n\nexport const AuthorName = styled.span`\nfont-size: 24px;\n`","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst END_POINTS = {\n    trending: '/trending/movie/week',\n    search: '/search/movie',\n    movieDetails: '/movie',\n    movieCredits: '/credits',\n    reviews: '/reviews',\n\n}\n\nexport const getMovies = async (page=1) => {\n    const response = await axios.get(`${END_POINTS.trending}?page=${page}&language=en-US&include_adult=false`,\n        {\n            params: {\n                api_key: '8234db11c162011590d14a3080848ed6', \n            }\n        }\n    )\n    console.log(response.data.results)\n    return response.data.results;\n}\n\nexport const fetchMoviesByQuerry = async (query, page = 1) => {\n    const response = await axios.get(`${END_POINTS.search}?page=${page}&query=${query}&language=en-US&include_adult=false`,\n         {\n            params: {\n                api_key: '8234db11c162011590d14a3080848ed6', \n            }\n        })\n    return response.data.results\n}\n\nexport const fetchMoviesDetails = async (id) => {\n    const response = await axios.get(`${END_POINTS.movieDetails}/${id}?language=en-US`,\n         {\n            params: {\n                api_key: '8234db11c162011590d14a3080848ed6', \n            }\n        })\n    return response.data\n}\n\nexport const fetchMoviesCredits = async (id) => {\n    const response = await axios.get(`/movie/${id}${END_POINTS.movieCredits}?language=en-US`,\n         {\n            params: {\n                api_key: '8234db11c162011590d14a3080848ed6', \n            }\n        })\n    return response.data.cast\n}\n\nexport const fetchMoviesreviews = async (id, page = 1) => {\n    const response = await axios.get(`/movie/${id}${END_POINTS.reviews}?page=${page}&language=en-US`,\n    {\n            params: {\n                api_key: '8234db11c162011590d14a3080848ed6', \n            }\n        })\n    return response.data.results\n}\n\n"],"names":["CastList","styled","id","useParams","useState","cast","setCast","error","setError","loader","setLoader","useEffect","fetchCast","fetchMoviesCredits","response","map","item","src","profile_path","alt","name","character","Text","Item","List","AuthorName","axios","END_POINTS","getMovies","page","params","api_key","console","log","data","results","fetchMoviesByQuerry","query","fetchMoviesDetails","fetchMoviesreviews"],"sourceRoot":""}